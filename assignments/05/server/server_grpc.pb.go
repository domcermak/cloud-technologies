// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EtcdClient is the client API for Etcd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
}

type etcdClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdClient(cc grpc.ClientConnInterface) EtcdClient {
	return &etcdClient{cc}
}

func (c *etcdClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Etcd/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdClient) Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Etcd/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Etcd/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdServer is the server API for Etcd service.
// All implementations must embed UnimplementedEtcdServer
// for forward compatibility
type EtcdServer interface {
	Get(context.Context, *GetRequest) (*Response, error)
	Post(context.Context, *PostRequest) (*Response, error)
	Delete(context.Context, *DeleteRequest) (*Response, error)
	mustEmbedUnimplementedEtcdServer()
}

// UnimplementedEtcdServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdServer struct {
}

func (UnimplementedEtcdServer) Get(context.Context, *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEtcdServer) Post(context.Context, *PostRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedEtcdServer) Delete(context.Context, *DeleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEtcdServer) mustEmbedUnimplementedEtcdServer() {}

// UnsafeEtcdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdServer will
// result in compilation errors.
type UnsafeEtcdServer interface {
	mustEmbedUnimplementedEtcdServer()
}

func RegisterEtcdServer(s grpc.ServiceRegistrar, srv EtcdServer) {
	s.RegisterService(&Etcd_ServiceDesc, srv)
}

func _Etcd_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Etcd/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Etcd_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Etcd/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdServer).Post(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Etcd_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Etcd/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Etcd_ServiceDesc is the grpc.ServiceDesc for Etcd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Etcd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Etcd",
	HandlerType: (*EtcdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Etcd_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Etcd_Post_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Etcd_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
